import os
from collections import Counter

import telebot
from dotenv import load_dotenv
from telebot import types

from database import SessionLocal
from services import (
    add_product_to_cart,
    add_review_to_order,
    checkout_cart,
    create_user_if_not_exists,
    get_all_categories,
    get_cart,
    get_menu_messages,
    get_orders_by_user,
    get_products_by_category,
)

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

MENU = {
    "menu": "üçΩÔ∏è –ú–µ–Ω—é",
    "cart": "üõí –ö–æ—Ä–∑–∏–Ω–∞",
    "orders": "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"
}


class MenuHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é: –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """

    def __init__(self, bot):
        self.bot = bot

    def show_menu(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏."""
        with SessionLocal() as db:
            categories = get_all_categories(db)
            for cat in categories:
                products = get_products_by_category(db, cat.id)
                if not products:
                    continue
                text = f"<b>{cat.name}</b>\n"
                markup = types.InlineKeyboardMarkup()
                for prod in products:
                    price = f"{prod.cost:.2f}" if prod.cost else "-"
                    text += f"{prod.name}: {price}‚ÇΩ\n"
                    markup.add(
                        types.InlineKeyboardButton(
                            f"‚ûï {prod.name}", callback_data=f"add_{prod.id}"
                        )
                    )
                self.bot.send_message(
                    message.chat.id, text, parse_mode="HTML", reply_markup=markup
                )


class CartHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É, –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –µ—ë, –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã.
    """

    def __init__(self, bot, main_menu):
        self.bot = bot
        self.main_menu = main_menu

    def show_cart(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with SessionLocal() as db:
            user = create_user_if_not_exists(db, str(message.from_user.id))
            cart = get_cart(db, user.id)
            if not cart or not cart.content.get("products"):
                self.bot.send_message(
                    message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=self.main_menu
                )
                return
            counts = Counter(cart.content["products"])
            text = "<b>–ö–æ—Ä–∑–∏–Ω–∞:</b>\n"
            total = 0
            for pid, count in counts.items():
                prod = db.query(get_all_categories.__globals__["Product"]).get(pid)
                if prod:
                    subtotal = prod.cost * count
                    text += f"{prod.name} x{count} = {subtotal:.2f}‚ÇΩ\n"
                    total += subtotal
            text += f"\n<b>–ò—Ç–æ–≥–æ: {total:.2f}‚ÇΩ</b>"
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"
                ),
                types.InlineKeyboardButton(
                    "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"
                ),
            )
            self.bot.send_message(
                message.chat.id, text, parse_mode="HTML", reply_markup=markup
            )

    def clear_cart(self, call):
        """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with SessionLocal() as db:
            user = create_user_if_not_exists(db, str(call.from_user.id))
            cart = get_cart(db, user.id)
            if cart:
                cart.content = {"products": []}
                db.commit()
        self.bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
        self.bot.send_message(
            call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=self.main_menu
        )

    def ask_payment_method(self, call, order_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞."""
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "üí≥ –û–Ω–ª–∞–π–Ω", callback_data=f"pay_online_{order_id}"
            ),
            types.InlineKeyboardButton(
                "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏", callback_data=f"pay_cash_{order_id}"
            ),
        )
        self.bot.send_message(
            call.message.chat.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:",
            reply_markup=markup,
        )

    def checkout(self, call):
        """–û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."""
        with SessionLocal() as db:
            user = create_user_if_not_exists(db, str(call.from_user.id))
            order = checkout_cart(db, user.id)
        if order:
            self.bot.send_message(
                call.message.chat.id,
                f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!",
                reply_markup=self.main_menu,
            )
            self.ask_payment_method(call, order.id)
        else:
            self.bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

    def add_to_cart(self, call):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        product_id = int(call.data.split("_")[1])
        with SessionLocal() as db:
            user = create_user_if_not_exists(db, str(call.from_user.id))
            add_product_to_cart(db, user.id, product_id)
        self.bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        self.bot.send_message(
            call.message.chat.id,
            "–î–æ–±–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ üõí –ö–æ—Ä–∑–∏–Ω—É.",
        )


class OrderHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    def __init__(self, bot, main_menu):
        self.bot = bot
        self.main_menu = main_menu

    def show_orders(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with SessionLocal() as db:
            user = create_user_if_not_exists(db, str(message.from_user.id))
            orders = get_orders_by_user(db, user.id)
            if not orders:
                self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
                return
            for order in orders:
                counts = Counter(order.content.get("products", []))
                text = f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b>\n"
                total = 0
                for pid, count in counts.items():
                    prod = db.query(get_all_categories.__globals__["Product"]).get(pid)
                    if prod:
                        subtotal = prod.cost * count
                        text += f"{prod.name} x{count} = {subtotal:.2f}‚ÇΩ\n"
                        total += subtotal
                text += f"–ò—Ç–æ–≥–æ: {total:.2f}‚ÇΩ\n"
                if order.review:
                    text += f"üí¨ <b>–û—Ç–∑—ã–≤:</b>\n<i>¬´{order.review}¬ª</i>\n"
                else:
                    text += f"ÔøΩÔøΩ <b>–û—Ç–∑—ã–≤:</b>\n<i>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>\n"
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{order.id}"))
                self.bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)


class FeedbackHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∑–∞–∫–∞–∑–∞–º.
    """

    def __init__(self, bot, main_menu, user_states):
        self.bot = bot
        self.main_menu = main_menu
        self.user_states = user_states

    def handle_feedback(self, message):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        self.bot.send_message(
            message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        self.user_states[message.chat.id] = "awaiting_feedback"

    def save_feedback(self, message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = message.text
        self.user_states.pop(message.chat.id)
        self.bot.send_message(
            message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=self.main_menu
        )

    def handle_review(self, message):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ –∑–∞–∫–∞–∑—É."""
        try:
            order_id = int(message.text.split()[1])
            self.user_states[message.chat.id] = f"review_{order_id}"
            self.bot.send_message(
                message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:"
            )
        except:
            self.bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: –û—Ç–∑—ã–≤ <–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞>")

    def save_review(self, message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–∫–∞–∑—É."""
        order_id = int(self.user_states.pop(message.chat.id).split('_')[1])
        review_text = message.text
        with SessionLocal() as db:
            add_review_to_order(db, order_id, review_text)
        self.bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=self.main_menu)


class TeleFoodBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞. –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã.
    """

    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.user_states = {}
        self.main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        self.main_menu.add(MENU['menu'], MENU['cart'])
        self.main_menu.add(MENU['orders'])
        # Handlers
        self.menu_handler = MenuHandler(self.bot)
        self.cart_handler = CartHandler(self.bot, self.main_menu)
        self.order_handler = OrderHandler(self.bot, self.main_menu)
        self.feedback_handler = FeedbackHandler(self.bot, self.main_menu, self.user_states)
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∫–Ω–æ–ø–æ–∫."""
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            create_user_if_not_exists(SessionLocal(), str(message.from_user.id))
            self.bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeleFood!", reply_markup=self.main_menu)
            self.menu_handler.show_menu(message)

        @self.bot.message_handler(func=lambda m: m.text == MENU['menu'])
        def handle_menu(message):
            self.menu_handler.show_menu(message)

        @self.bot.message_handler(func=lambda m: m.text == MENU['cart'])
        def handle_cart(message):
            self.cart_handler.show_cart(message)

        @self.bot.message_handler(func=lambda m: m.text == MENU['orders'])
        def handle_orders(message):
            self.order_handler.show_orders(message)

        @self.bot.message_handler(func=lambda m: self.user_states.get(m.chat.id) == 'awaiting_feedback')
        def save_feedback(message):
            self.feedback_handler.save_feedback(message)

        @self.bot.message_handler(func=lambda m: m.text.startswith("–û—Ç–∑—ã–≤ "))
        def handle_review(message):
            self.feedback_handler.handle_review(message)

        @self.bot.message_handler(func=lambda m: self.user_states.get(m.chat.id, '').startswith('review_'))
        def save_review(message):
            self.feedback_handler.save_review(message)

        @self.bot.callback_query_handler(func=lambda c: c.data == "clear_cart")
        def clear_cart(call):
            self.cart_handler.clear_cart(call)

        @self.bot.callback_query_handler(func=lambda c: c.data == "checkout")
        def checkout(call):
            self.cart_handler.checkout(call)

        @self.bot.callback_query_handler(func=lambda c: c.data.startswith("add_"))
        def add_to_cart(call):
            self.cart_handler.add_to_cart(call)

        @self.bot.callback_query_handler(func=lambda c: c.data.startswith("pay_online_"))
        def pay_online(call):
            order_id = call.data.split("_")[-1]
            self.bot.answer_callback_query(call.id)
            self.bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –æ–Ω–ª–∞–π–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}. (–ó–∞–≥–ª—É—à–∫–∞)")

        @self.bot.callback_query_handler(func=lambda c: c.data.startswith("pay_cash_"))
        def pay_cash(call):
            order_id = call.data.split("_")[-1]
            self.bot.answer_callback_query(call.id)
            self.bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}. (–ó–∞–≥–ª—É—à–∫–∞)")

        @self.bot.callback_query_handler(func=lambda c: c.data.startswith("review_"))
        def review_callback(call):
            order_id = int(call.data.split("_")[1])
            self.feedback_handler.user_states[call.message.chat.id] = f"review_{order_id}"
            self.bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:")
            self.bot.answer_callback_query(call.id)

    def run(self):
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.bot.polling(none_stop=True)


if __name__ == "__main__":
    TeleFoodBot(API_TOKEN).run()
